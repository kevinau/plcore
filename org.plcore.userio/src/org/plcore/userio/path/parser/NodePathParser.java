/* Generated By:JavaCC: Do not edit this line. NodePathParser.java */
package org.plcore.userio.path.parser;

import java.io.ByteArrayInputStream;
import java.io.InputStream;

import org.plcore.userio.path.DescendentStep;
import org.plcore.userio.path.IndexedElementStep;
import org.plcore.userio.path.EndStep;
import org.plcore.userio.path.NamedElementStep;
import org.plcore.userio.path.IPathExpression;
import org.plcore.userio.path.PathExpression;
import org.plcore.userio.path.WildcardStep;

public class NodePathParser implements NodePathParserConstants {

  private static class NullInputStream extends InputStream {
    @Override
    public int read() {
      return 0;
    }
  }

//  public static void main(String args[]) throws ParseException 
//  {
//    NodePathParser parser = new NodePathParser(System.in);
//    while (true) {
//      parser.parse();
//    }
//  }

  public NodePathParser () {
    this(new NullInputStream());
  }

  public IPathExpression parse(String s) throws ParseException {
    ReInit(new ByteArrayInputStream(s.getBytes()));
    PathExpression ex = new PathExpression(s);
    parse(ex);
    return ex;
  }

  final public void parse(PathExpression parent) throws ParseException {
    PathExpression ex;
    ex = parseStep(parent);
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SEPARATOR:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      jj_consume_token(SEPARATOR);
      ex = parseStep(ex);
    }
      ex = new EndStep(ex);
  }

  final public PathExpression parseStep(PathExpression parent) throws ParseException {
  Token n = null;
  PathExpression ex;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case WILDCARDX2:
      jj_consume_token(WILDCARDX2);
          ex = new DescendentStep(parent);
      break;
    case WILDCARD:
      jj_consume_token(WILDCARD);
          ex = new WildcardStep(parent);
      break;
    case NAME:
      n = jj_consume_token(NAME);
          ex = new NamedElementStep(parent, n.toString());
      break;
    case HYPHEN:
      jj_consume_token(HYPHEN);
      n = jj_consume_token(NUMBER);
          ex = new IndexedElementStep(parent, n.toString(), false);
      break;
    case NUMBER:
      n = jj_consume_token(NUMBER);
          ex = new IndexedElementStep(parent, n.toString(), true);
      break;
    default:
      jj_la1[1] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    return ex;
    //throw new Error("Missing return statement in function");
  }

  /** Generated Token Manager. */
  public NodePathParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[2];
  static private int[] jj_la1_0;
  static {
      jj_la1_init_0();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x4,0x13a,};
   }

  /** Constructor with InputStream. */
  public NodePathParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public NodePathParser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new NodePathParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 2; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 2; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public NodePathParser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new NodePathParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 2; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 2; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public NodePathParser(NodePathParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 2; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(NodePathParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 2; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[9];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 2; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 9; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

}
